### Smart Pointers ###

RefPtr:
  kind: Smart Pointer
  traverse:
    - mRawPtr
# Aliases
nsCOMPtr: RefPtr
nsAutoPtr: RefPtr
mozilla::StaticAutoPtr: RefPtr
mozilla::StaticRefPtr: RefPtr

UniquePtr:
  kind: Smart Pointer
  traverse:
    - mTuple
    - mFirstA

### XPCOM-ish stuff ###
nsAutoRefCnt:
  kind: RefCount
  terse:
  - mValue: true
  # Can this just be covered by the type name?
  - isThreadSafe: true

### Containers ###

# Note that the LinkedList is the container, posessing a "sentinel" member.  The
# elements are LinkedListElements.  We only want to print the entire list if we
# find ourselves looking at a LinkedList type.  Printing one member should not
# print all its siblings.
mozilla::LinkedList:
  kind: Collection
  iterate:
    # "sentinel" is the magic that enters into our hard-coded logic for this
    # case.
    sentinel: sentinel
    advance: mNext

### String hacks
# XXX remove this.  nsCString wasn't pretty printing for me in one of my test
# cases, so I added this hack.  As I went to write the commit message, I
# realized the problem is likely that I ran rr from outside the mozilla-central
# tree and so the auto-loading heuristics failed to find the mozilla pretty
# printers.  (I've been doing most of my other dev loop cycle from the right
# location.)  I'm going to leave this in for a little if only because it's an
# interesting edge case.
##nsCString:
##  kind: String
##  traverse:
##  - mData

### Security-ish stuff

ContentPrincipal:
  simple:
  - mCodebase: true
  - mOriginAttributes: true

mozilla::OriginAttributes:
  terse:
  - mPrivateBrowsingId: true
  - mUserContextId: true
  - mFirstPartyDomain: true

### Necko-ish Stuff ###

mozilla::net::nsStandardURL:
  # XXX this wants to be terse, but we need to rely on the underlying printer
  # for strings and terse bypasses it.
  simple:
  - mSpec: true

mozilla::net::nsHttpRequestHead:
  terse:
  - mMethod: true

mozilla::net::nsLoadGroup:
  simple:
  - mLoadFlags: true

mozilla::net::LoadInfo:
  simple:
  - mLoadingPrincipal: true
  - mOriginAttributes: true

mozilla::net::HttpBaseChannel:
  groups:
  - overview:
    - mRequestHead: true
    - mURI: true
  - context:
    - mOriginalURI: true
    - mDocumentURI: true
  - load:
    - mUploadStream: true
    # should include somehow: mCorsMode, mRedirectMode, mFetchCacheMode
    - mLoadFlags: true
    - mLoadGroup: true
    - mLoadInfo: true
# TODO: address inheritance somehow; there are aspects of HttpChannelChild that
# are interesting on their own.  We absolutely don't want to have to duplicate
# most things.  explicit inheritance seems useful, although the more concise
# the better.
mozilla::net::HttpChannelChild: mozilla::net::HttpBaseChannel
mozilla::net::nsHttpChannel: mozilla::net::HttpBaseChannel

### DOM IPC ###

mozilla::dom::IdType:
  terse:
  - mId: true
# TODO: I think these want to both be extra terse displays that just amount to
# the typename and the mId.
mozilla::dom::ContentParentId: mozilla::dom::IdType
mozilla::dom::TabId: mozilla::dom::IdType

mozilla::dom::ContentParent:
  # characterize by type and pid.
  terse:
  - mRemoteType: true
  - mOtherPid: true

mozilla::dom::ContentProcessManager:
  simple:
  - mContentParentMap: true

# TODO: remove this type once our naive heuristics can handle the traversal
# automatically.
mozilla::dom::ContentProcessInfo:
  simple:
  - mCp: true
  - mParentCpId: true
  - mChildrenCpId: true
  - mRemoteFrames: true

mozilla::ipc::MessageChannel:
  terse:
  - mName: true
  - mChannelState: true


### Core DOM ###

nsHTMLDocument:
  groups:
  - URIs:
    - mDocumentURI: true
    - mOriginalURI: true
  - state:
    - mReadyState: true
    - mVisibilityState: true
    - mOnloadBlockCount: true
    - mBFCacheEntry: true
    - mIsThirdParty: true
  - netish:
    - mChannel: true
  ##- perf:
  ##  - mTiming: true
  # for traversals?: mWindow,

### ServiceWorkers ###

mozilla::dom::workers::ServiceWorkerManager:
  groups:
  - registrations:
    - mRegistrationInfos: terse
  - documents:
    - mControlledDocuments: terse
    - mRegisteringDocuments: terse
  - interceptions:
    - mNavigationInterceptions: terse
  - startup:
    # - mActor: bool
    - mPendingOperations: terse
  - debugging:
    - mListeners: type

mozilla::dom::workers::ServiceWorkerManager::RegistrationDataPerPrincipal:
  simple:
  - mOrderedScopes: true
  - mInfos: true

mozilla::dom::workers::ServiceWorkerRegistrationInfo:
  groups:
  - state:
    - mScope: true
    - mUpdateState: true
  - workers:
    - mEvaluatingWorker: true
    - mActiveWorker: true
    - mWaitingWorker: true
    - mInstallingWorker: true

mozilla::dom::workers::ServiceWorkerInfo:
  simple:
  - mScope: true
  - mScriptSpec: true
  - mState: true
  - mSkipWaitingFlag: true
  - mHandlesFetch: true
